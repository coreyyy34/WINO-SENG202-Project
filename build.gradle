plugins {
    id 'application'
    id 'java'
    id "org.openjfx.javafxplugin" version "0.0.14"
    id 'jacoco'
    id 'checkstyle'
}

archivesBaseName = 'wino'
group = 'seng202.team6'
version = '2.0-snapshot'
mainClassName = 'seng202.team6.App'

def javaVersion = '21'
def javafxVersion = '21.0.4'
def log4jVersion = '2.17.2'
def cucumberVersion = "7.5.0"
def junitVersion = "5.8.1"

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.openjfx/javafx-controls
    implementation "org.openjfx:javafx-controls:${javafxVersion}"

    // https://mvnrepository.com/artifact/org.openjfx/javafx-fxml
    implementation "org.openjfx:javafx-fxml:${javafxVersion}"

    // https://mvnrepository.com/artifact/org.openjfx/javafx-web
    implementation "org.openjfx:javafx-web:${javafxVersion}"

    // range slider
    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation 'org.controlsfx:controlsfx:11.1.2'

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation 'org.xerial:sqlite-jdbc:3.39.2.1'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation 'com.opencsv:opencsv:5.5.2'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // https://mvnrepository.com/artifact/io.github.cdimascio/java-dotenv
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-junit-platform-engine
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-java
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-junit
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"

    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.23.1'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.4.0'

    implementation 'org.apache.poi:poi:5.2.0'
    implementation 'org.apache.poi:poi-ooxml:5.2.0'

// https://mvnrepository.com/artifact/com.ibm.icu/icu4j
    implementation 'com.ibm.icu:icu4j:75.1'
}

checkstyle {
    toolVersion '10.18.2'
    configFile file("config/checkstyle/checkstyle.xml")
}

application {
    // Define the main class for the application.
    mainClass = "${mainClassName}"
}
javafx {
    version = "${javafxVersion}"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

test {
    useJUnitPlatform()

    filter {
        includeTestsMatching "seng202.team6.unittests.*"
    }

    finalizedBy jacocoTestReport
}

tasks.register("cucumber", Test) {
    group = "verification"

    useJUnitPlatform()

    filter {
        includeTestsMatching "seng202.team6.cucumber.*"
    }

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    finalizedBy jacocoTestReport
}

tasks.named("check") {
    dependsOn test, cucumber

    finalizedBy jacocoTestReport
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

run {
    // Add the internal JavaFX API to the module path
    jvmArgs = ['--module-path', classpath.asPath, '--add-exports', 'javafx.web/com.sun.javafx.webkit=ALL-UNNAMED']
}


// Jacoco test coverage config
jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    executionData fileTree(project.rootDir) {
        include '**/*.exec'
    }
    reports {
        html.destination file("${buildDir}/reports/tests/coverage/")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'seng202/team6/gui/**')
        }))
    }
}
